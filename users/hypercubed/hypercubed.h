#ifndef USERSPACE
#define USERSPACE

#include "quantum.h"

enum unicode_names {
    UC_U_ALPHA,
    UC_U_BETA,
    UC_U_TAU,
    UC_IEXL,
    UC_CENT,
    UC_PND,
    UC_CURREN,
    UC_YEN,
    UC_SECTION,
    UC_COPY,
    UC_LDQUOTE,
    UC_NOT,
    UC_REG,
    UC_DEGREE,
    UC_PLSMINS,
    UC_SUP2,
    UC_SUP3,
    UC_PARA,
    UC_SUP1,
    UC_RDQUOTE,
    UC_QRTR,
    UC_HALF,
    UC_TQTR,
    UC_IQST,
    UC_U_AELIG,
    UC_L_AELIG,
    UC_MUL,
    UC_CCEDIL,
    UC_DIV,
    UC_FNOF,
    UC_U_GAMMA,
    UC_U_DELTA,
    UC_U_EPSILON,
    UC_U_ZETA,
    UC_U_ETA,
    UC_U_THETA,
    UC_U_IOTA,
    UC_U_KAPPA,
    UC_U_LAMBDA,
    UC_U_MU,
    UC_U_NU,
    UC_U_XI,
    UC_U_OMICRON,
    UC_U_PI,
    UC_U_RHO,
    UC_U_SIGMA,
    UC_U_UPSILON,
    UC_U_PHI,
    UC_U_CHI,
    UC_U_PSI,
    UC_U_OMEGA,
    UC_L_ALPHA,
    UC_L_BETA,
    UC_L_GAMMA,
    UC_L_DELTA,
    UC_L_EPSILON,
    UC_L_ZETA,
    UC_L_ETA,
    UC_L_THETA,
    UC_L_IOTA,
    UC_L_KAPPA,
    UC_L_LAMBDA,
    UC_L_MU,
    UC_L_NU,
    UC_L_XI,
    UC_L_OMICRON,
    UC_L_PI,
    UC_L_RHO,
    UC_L_SIGMA,
    UC_L_TAU,
    UC_L_UPSILON,
    UC_L_PHI,
    UC_L_CHI,
    UC_L_PSI,
    UC_L_OMEGA,
    UC_EMDASH,
    UC_DVLINE,
    UC_DAGG,
    UC_DDAG,
    UC_BULT,
    UC_TDOT,
    UC_ELLIPSES,
    UC_INTROBANG,
    UC_OLINE,
    UC_EURO,
    UC_CSET,
    UC_HBAR,
    UC_NSET,
    UC_QSET,
    UC_RSET,
    UC_ZSET,
    UC_ANG,
    UC_RN1,
    UC_RN2,
    UC_RN3,
    UC_RN4,
    UC_FROM,
    UC_UARR,
    UC_TO,
    UC_DARR,
    UC_TO_FROM,
    UC_IMPL_REV,
    UC_UPPER,
    UC_IMPLY,
    UC_LOWER,
    UC_BICOND,
    UC_FORALL,
    UC_PDIF,
    UC_EXISTS,
    UC_NEXISTS,
    UC_EMPTY,
    UC_NABLA,
    UC_ELEOF,
    UC_NELEOF,
    UC_MINSPLS,
    UC_ROOT,
    UC_PROP,
    UC_INIFIN,
    UC_AND,
    UC_OR,
    UC_INTERSECT,
    UC_MUNION,
    UC_INT,
    UC_THEREFORE ,
    UC_AEQL,
    UC_ALEQL,
    UC_NEQ,
    UC_EQUIV,
    UC_LTEQ,
    UC_GTEQ,
    UC_SUBSET,
    UC_SUPERSET,
    UC_SUBSETOREQ,
    UC_SUPERSETOREQ,
    UC_SQ_LS,
    UC_SQ_RS,
    UC_RT_TACK,
    UC_LT_TACK,
    UC_DOWN_TACK,
    UC_UP_TACK,
    UC_LT_CIEL,
    UC_LCEIL,
    UC_LT_FLOOR,
    UC_RFLOOR,
    UC_RNOT,
    UC_SQUARE,
    UC_WDOT,
    UC_LWDOT,
    UC_FLAT,
    UC_TVLINE,
    UC_LWSQBKT,
    UC_RWSQBKT,
    UC_L_SIGMAF

};

enum unicode_keycodes {
    // GREEK 1234 ROW
    GR_GRV = QK_KB_11,
    GR_1,
    GR_2,
    GR_3,
    GR_4,
    GR_5,
    GR_6,
    GR_7,
    GR_8,
    GR_9,
    GR_0,
    GR_MINS,
    GR_EQL,

    // GREEK QWER ROW
    GR_Q,
    GR_W,
    GR_E,
    GR_R,
    GR_T,
    GR_Y,
    GR_U,
    GR_I,
    GR_O,
    GR_P,
    GR_LBRC,
    GR_RBRC,
    GR_BSLS,

    // GREEK ASDF ROW
    GR_A,
    GR_S,
    GR_D,
    GR_F,
    GR_G,
    GR_H,
    GR_J,
    GR_K,
    GR_L,
    GR_SCLN,
    GR_QUOT,

    // GREEK ZXC ROW
    GR_Z,
    GR_X,
    GR_C,
    GR_V,
    GR_B,
    GR_N,
    GR_M,
    GR_COMM,
    GR_DOT,
    GR_SLSH,

    // SYMBOLS 1234 ROW
    SYM_1,
    SYM_2,
    SYM_3,
    SYM_4,
    SYM_5,
    SYM_6,
    SYM_7,
    SYM_8,
    SYM_9,
    SYM_0,
    SYM_MINS,
    SYM_EQL,

    // SYMBOLS QWERTY ROW
    SYM_Q,
    SYM_W,
    SYM_E,
    SYM_R,
    SYM_T,
    SYM_Y,
    SYM_U,
    SYM_I,
    SYM_O,
    SYM_P,
    SYM_LBRC,
    SYM_RBRC,
    SYM_BSLS,

    // SYMBOLS ASDF ROW
    SYM_A,
    SYM_S,
    SYM_D,
    SYM_F,
    SYM_G,
    SYM_H,
    SYM_J,
    SYM_K,
    SYM_L,
    SYM_SCLN,

    // SYMBOLS ZXC ROW
    SYM_Z,
    SYM_X,
    SYM_C,
    SYM_V,
    SYM_B,
    SYM_N,
    SYM_M,
    SYM_COMM,
    SYM_DOT,
    SYM_SLSH,
    SYM_P1
};

enum ascii_names {
    ASCII_REG,
    ASCII_DIV,
    ASCII_MUL,
    ASCII_HALF,
    ASCII_TQTR,
    ASCII_INIFIN,
    ASCII_IQST,
    ASCII_L_AELIG,
};

// Undefined Key Codes

#define SYM_QUOT _______
#define SYM_P2 _______
#define SYM_P3 _______
#define SYM_GRV _______

// Helpers
#define SEND(X, Y) send(X, Y, record)
#define SEND_ASCII(X) register_asciimap(X)

bool process_greek(uint16_t keycode, keyrecord_t *record);
bool process_symbol(uint16_t keycode, keyrecord_t *record);
bool process_record_unicode(uint16_t keycode, keyrecord_t *record);
void leader_unicode(void);

#endif
