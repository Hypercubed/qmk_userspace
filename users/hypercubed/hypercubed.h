#ifndef USERSPACE
#define USERSPACE

#include "quantum.h"

enum unicode_names {
    // GREEK
    U_GK_A_LOWER,
    U_GK_A_UPPER,
    U_GK_B_LOWER,
    U_GK_B_UPPER,
    U_GK_G_LOWER,
    U_GK_G_UPPER,
    U_GK_D_LOWER,
    U_GK_D_UPPER,
    U_GK_E_LOWER,
    U_GK_E_UPPER,
    U_GK_Z_LOWER,
    U_GK_Z_UPPER,
    U_GK_H_LOWER,
    U_GK_H_UPPER,
    U_GK_Q_LOWER,
    U_GK_Q_UPPER,
    U_GK_I_LOWER,
    U_GK_I_UPPER,
    U_GK_K_LOWER,
    U_GK_K_UPPER,
    U_GK_L_LOWER,
    U_GK_L_UPPER,
    U_GK_M_LOWER,
    U_GK_M_UPPER,
    U_GK_N_LOWER,
    U_GK_N_UPPER,
    U_GK_X_LOWER,
    U_GK_X_UPPER,
    U_GK_O_LOWER,
    U_GK_O_UPPER,
    U_GK_P_LOWER,
    U_GK_P_UPPER,
    U_GK_R_LOWER,
    U_GK_R_UPPER,
    U_GK_S_LOWER,
    U_GK_S_UPPER,
    U_GK_T_LOWER,
    U_GK_T_UPPER,
    U_GK_U_LOWER,
    U_GK_U_UPPER,
    U_GK_F_LOWER,
    U_GK_F_UPPER,
    U_GK_C_LOWER,
    U_GK_C_UPPER,
    U_GK_V_LOWER,
    U_GK_V_UPPER,
    U_GK_W_LOWER,
    U_GK_W_UPPER,

    // GREEK SYMBOLS
    U_SYM_DAGG,
    U_SYM_DDAG,
    // U_SYM_NABLA,
    U_SYM_CENT,
    U_SYM_DEGREE,
    U_SYM_SQUARE,
    U_SYM_DIV,
    U_SYM_MUL,
    U_SYM_PARA,
    U_SYM_WDOT,
    U_SYM_11835,
    U_SYM_AEQL,
    U_SYM_LDAQ,
    U_SYM_RDAQ,
    U_SYM_INTG,
    U_SYM_8229,
    U_SYM_BULT,

    // SYMBOLS QWERTY ROW
    U_SYM_AND,
    U_SYM_OR,
    U_SYM_INTERSECT,
    U_SYM_MUNION,
    U_SYM_SUBSET,
    U_SYM_SUPERSET,
    U_SYM_FORALL,
    U_SYM_INIFIN,
    U_SYM_EXISTS,
    U_SYM_PDIF,
    U_SYM_ELEOF,
    U_SYM_QSET,
    U_SYM_RSET,
    U_SYM_SUBSETOREQ,
    U_SYM_SUPERSETOREQ,
    U_SYM_NEXISTS,
    U_SYM_NELEOF,

    // SYMBOLS ASDF ROW
    U_SYM_UP_TACK,
    U_SYM_DOWN_TACK,
    U_SYM_RT_TACK,
    U_SYM_LT_TACK,
    U_SYM_UARR,
    U_SYM_DARR,
    U_SYM_FROM,
    U_SYM_TO,
    U_SYM_TO_FROM,
    U_SYM_ANG,
    U_SYM_NABLA,
    U_SYM_UPPER,
    U_SYM_LOWER,
    U_SYM_IMPL_REV,
    U_SYM_IMPLY,
    U_SYM_BICOND,

    // SYMBOLS ZXC ROW
    U_SYM_LT_FLOOR,
    U_SYM_LT_CIEL,
    U_SYM_NEQ,
    // U_SYM_AEQL,
    U_SYM_EQUIV,
    U_SYM_LTEQ,
    U_SYM_GTEQ,
    U_SYM_SQ_LS,
    U_SYM_SQ_RS,
    U_SYM_ZSET,
    U_SYM_CSET,
    U_SYM_ROUGHLY,
    U_SYM_NSET,

    // SYMBOLS NUM ROW
    U_SYM_SUP1,
    U_SYM_SUP2,
    U_SYM_SUP3,
    U_SYM_HALF,
    U_SYM_THREE_QTR,
    U_SYM_PLUS_MINUS,
    U_SYM_IEXL,
    U_SYM_PND,
    U_SYM_DEGR,
    U_SYM_MINUS_PLUS
};

enum my_keycodes {
    // GREEK
    GK_ALPHA = QK_KB_11,
    GK_BETA,
    GK_GAMMA,
    GK_DELTA,
    GK_EPSILON,
    GK_ZETA,
    GK_ETA,
    GK_THETA,
    GK_IOTA,
    GK_KAPPA,
    GK_LAMBDA,
    GK_MU,
    GK_NU,
    GK_XI,
    GK_OMICRON,
    GK_PI,
    GK_RHO,
    GK_SIGMA,
    GK_TAU,
    GK_UPSILON,
    GK_PHI,
    GK_CHI,
    GK_PSI,
    GK_OMEGA,

    // GREEK SYMBOLS
    GK_1,
    GK_2,
    GK_3,
    GK_4,
    GK_5,
    GK_6,
    GK_7,
    GK_8,
    GK_9,
    GK_0,
    GK_MINS,
    GK_EQL,
    GK_COMM,
    GK_DOT,
    GK_SLSH,
    GK_SCLN,
    GK_QUOT,

    // SYMBOLS NUM ROW
    SYM_1,
    SYM_2,
    SYM_3,
    SYM_4,
    SYM_5,
    SYM_6,
    SYM_7,
    SYM_8,
    SYM_9,
    SYM_0,
    SYM_MINS,
    SYM_EQL,

    // SYMBOLS QWERTY ROW
    SYM_Q,
    SYM_W,
    SYM_E,
    SYM_R,
    SYM_T,
    SYM_Y,
    SYM_U,
    SYM_I,
    SYM_O,
    SYM_P,
    SYM_LBRC,
    SYM_RBRC,

    // SYMBOLS ASDF ROW
    SYM_A,
    SYM_S,
    SYM_D,
    SYM_F,
    SYM_G,
    SYM_H,
    SYM_J,
    SYM_K,
    SYM_L,
    SYM_SCLN,
    SYM_QUOT,

    // SYMBOLS ZXC ROW
    SYM_Z,
    SYM_X,
    SYM_C,
    SYM_V,
    SYM_B,
    SYM_N,
    SYM_M,
    SYM_COMM,
    SYM_DOT,
    SYM_SLSH
};

inline bool register_unicode_up(uint16_t x, uint16_t y, keyrecord_t *record) {
    if (record->event.pressed) {
        register_unicodemap(unicodemap_index(UP(x, y)));
    }
    return false;
}

bool process_greek(uint16_t keycode, keyrecord_t *record);
bool process_symbol(uint16_t keycode, keyrecord_t *record);
bool process_record_unicode(uint16_t keycode, keyrecord_t *record);

#endif


